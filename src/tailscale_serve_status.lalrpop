use std::net::{Ipv4Addr, SocketAddrV4};
use std::str::FromStr;

use crate::ast::{HttpSpec, HttpsSpec, ListenAddress, OperationMode};

grammar;


pub HttpSpecList: Vec<HttpSpec> = HttpSpec*;
pub HttpsSpecList: Vec<HttpsSpec> = HttpsSpec*;

pub HttpSpec: HttpSpec = {
    <ts_listen:HttpListenAddressLines> <port:HttpProxyTargetPort> => {
        HttpSpec {
            tailscale_listen_addresses: ts_listen,
            proxy_target_port: port,
        }
    },
};

pub HttpsSpec: HttpsSpec = {
    <ts_listen:HttpsListenAddressLines> <port:HttpProxyTargetPort> => {
        let (mode, tailscale_listen_addresses) = ts_listen;
        HttpsSpec {
            mode,
            tailscale_listen_addresses,
            proxy_target_port: port,
        }
    },
};

HttpsListenAddressLines: (OperationMode, Vec<ListenAddress>) = {
    ("https://" <ListenAddress> "(tailnet only)")+ => (OperationMode::Serve, <>),
    ("https://" <ListenAddress> "(Funnel on)")+ => (OperationMode::Funnel, <>),
};

HttpListenAddressLines: Vec<ListenAddress> = {
    ("http://" <ListenAddress> "(tailnet only)" "\n")+
};

HttpProxyTargetPort: u16 = "|-- / proxy http://127.0.0.1:" <PortNumber>; 

pub ListenAddress: ListenAddress = {
    // IPv4
    #[precedence(level="0")]
    <Ipv4> ":" <PortNumber> => ListenAddress::Ipv4(SocketAddrV4::new(<>)),

    // IPv6
    r"\[[0-9a-f:]+\]" ":" <PortNumber> => ListenAddress::Ipv6 {port: <>},

    // Domain name
    <dn:r"(?:[a-z0-9](?:[a-z0-9-]{0,61}[a-z0-9])?\.)+[a-z]+"> ":" <pn:PortNumber> => {
        ListenAddress::Domain { domain_name: dn.to_string(), port: pn }
    },
};


Ipv4: Ipv4Addr = r"[0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}[.][0-9]{1,3}"
    => {
        let mut slices = <>.split('.');
        Ipv4Addr::new(
            u8::from_str(slices.next().unwrap()).unwrap(),
            u8::from_str(slices.next().unwrap()).unwrap(),
            u8::from_str(slices.next().unwrap()).unwrap(),
            u8::from_str(slices.next().unwrap()).unwrap(),
        )
    };

PortNumber: u16 = r"[1-9][0-9]{0,4}" => u16::from_str(<>).unwrap();
